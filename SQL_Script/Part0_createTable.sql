-- Table: MOVIE
DROP TABLE IF EXISTS MOVIE;
CREATE TABLE MOVIE (
    MOVIE_ID SERIAL PRIMARY KEY,
    COUNTRY VARCHAR(100),
    BUDGET NUMERIC,
    TITLE VARCHAR(255),
    DESCRIPTION TEXT,
    MPA_RATING VARCHAR(10),
    RELEASED_YEAR INT,
    avg_rating DECIMAL(4,2),
    STUDIO_ID INT,
    CONSTRAINT unique_movie UNIQUE (country, title, released_year, studio_id)
);

-- Table: REMAKES
DROP TABLE IF EXISTS REMAKES;
CREATE TABLE REMAKES (
    MOVIE_REMAKE_ID INT PRIMARY KEY REFERENCES MOVIE(MOVIE_ID) ON DELETE CASCADE,
    ORIGINAL_MOVIE_ID INT REFERENCES MOVIE(MOVIE_ID) ON DELETE CASCADE
);

-- Table: CINEMATIC_MOVIE
DROP TABLE IF EXISTS CINEMATIC_MOVIE;
CREATE TABLE CINEMATIC_MOVIE (
    MOVIE_ID INT PRIMARY KEY REFERENCES MOVIE(MOVIE_ID) ON DELETE CASCADE,
    DURATION INT
);

-- Table: TV_SERIES
DROP TABLE IF EXISTS TV_SERIES;
CREATE TABLE TV_SERIES (
    MOVIE_ID INT PRIMARY KEY REFERENCES MOVIE(MOVIE_ID) ON DELETE CASCADE,
    NUMBER_OF_EPISODES INT DEFAULT 0, 
    SEASON_NUMBER INT,
    STREAMING_MEDIA VARCHAR(255)
);

-- Table: DOCUMENTARY
DROP TABLE IF EXISTS DOCUMENTARY;
CREATE TABLE DOCUMENTARY (
    MOVIE_ID INT PRIMARY KEY REFERENCES MOVIE(MOVIE_ID) ON DELETE CASCADE,
    Primary_historical_figure VARCHAR(255),
    Primary_historical_event VARCHAR(255)
);

-- Table: EPISODE
DROP TABLE IF EXISTS EPISODE;
CREATE TABLE EPISODE (
    MOVIE_ID INT REFERENCES TV_SERIES(MOVIE_ID) ON DELETE CASCADE,
    EPISODE_NUMBER INT,
    PRIMARY KEY (MOVIE_ID, EPISODE_NUMBER)
);

-- Table: EPISODE_CASTS
DROP TABLE IF EXISTS EPISODE_CASTS;
CREATE TABLE EPISODE_CASTS (
    MOVIE_ID INT,
    EPISODE_NUMBER INT,
    PARTICIPANT_ID INT,
    PRIMARY KEY (MOVIE_ID, EPISODE_NUMBER, PARTICIPANT_ID),
    FOREIGN KEY (MOVIE_ID, EPISODE_NUMBER) REFERENCES EPISODE(MOVIE_ID, EPISODE_NUMBER) ON DELETE CASCADE
);

-- Table: MAIN_TRAILER
DROP TABLE IF EXISTS MAIN_TRAILER;
CREATE TABLE MAIN_TRAILER (
    LINK VARCHAR(255) PRIMARY KEY,
    DURATION INT,
    RELEASE_DATE DATE,
    MOVIE_ID INT REFERENCES MOVIE(MOVIE_ID) ON DELETE CASCADE
);

-- Table: REVIEW
DROP TABLE IF EXISTS REVIEW;
CREATE TABLE REVIEW (
    USER_ID INT REFERENCES 'USER'(USER_ID) ON DELETE CASCADE,
    TIMESTAMP TIMESTAMP DEFAULT current_timestamp,
    MOVIE_ID INT REFERENCES MOVIE(MOVIE_ID) ON DELETE CASCADE,
    COMMENT TEXT,
    PRIMARY KEY (USER_ID, TIMESTAMP)
);

-- Table: STUDIO
DROP TABLE IF EXISTS STUDIO;
CREATE TABLE STUDIO (
    STUDIO_ID SERIAL PRIMARY KEY,
    NAME VARCHAR(255),
    FOUNDED_YEAR INT
);

-- Table: STUDIO_FOUNDER
DROP TABLE IF EXISTS STUDIO_FOUNDER;
CREATE TABLE STUDIO_FOUNDER (
    STUDIO_ID INT REFERENCES STUDIO(STUDIO_ID) ON DELETE CASCADE,
    FOUNDER_NAME VARCHAR(255),
    PRIMARY KEY (STUDIO_ID, FOUNDER_NAME)
);

-- Table: USER
DROP TABLE IF EXISTS "USER";
CREATE TABLE "USER" (
    USER_ID SERIAL PRIMARY KEY,
    EMAIL VARCHAR(255) UNIQUE NOT NULL,
    PASSWORD VARCHAR(255) NOT NULL,
    DISPLAYED_NAME VARCHAR(255),
    HOUSE_NUMBER VARCHAR(50),
    STREET VARCHAR(255),
    DISTRICT VARCHAR(255),
    CITY VARCHAR(100),
    DOB DATE
);

-- Table: USER_PHONE_NUMBER
DROP TABLE IF EXISTS USER_PHONE_NUMBER;
CREATE TABLE USER_PHONE_NUMBER (
    USER_ID INT REFERENCES "USER"(USER_ID) ON DELETE CASCADE,
    PHONE_NUMBER VARCHAR(20),
    PRIMARY KEY (USER_ID, PHONE_NUMBER)
);

-- Table: AWARD
DROP TABLE IF EXISTS AWARD;
CREATE TABLE AWARD (
    AWARD_ID SERIAL PRIMARY KEY,
    NAME VARCHAR(255),
    YEAR INT,
    INSTITUTION VARCHAR(255)
);

-- Table: MOVIE_AWARD_IS_NOMINATED
DROP TABLE IF EXISTS MOVIE_AWARD_IS_NOMINATED;
CREATE TABLE MOVIE_AWARD_IS_NOMINATED (
    AWARD_ID INT,
    MOVIE_ID INT REFERENCES MOVIE(MOVIE_ID) ON DELETE CASCADE,
    PRIMARY KEY (AWARD_ID, MOVIE_ID)
);

-- Table: MOVIE_AWARD
DROP TABLE IF EXISTS MOVIE_AWARD;
CREATE TABLE MOVIE_AWARD (
    AWARD_ID INT PRIMARY KEY REFERENCES AWARD(AWARD_ID) ON DELETE CASCADE,
    MOVIE_ID INT REFERENCES MOVIE(MOVIE_ID) ON DELETE CASCADE
);

-- Table: ACTOR_AWARD
DROP TABLE IF EXISTS ACTOR_AWARD;
CREATE TABLE ACTOR_AWARD (
    AWARD_ID INT PRIMARY KEY REFERENCES AWARD(AWARD_ID) ON DELETE CASCADE,
    ACTOR_ID INT ,
    ROLE VARCHAR(255),
    MOVIE VARCHAR(255)
);

-- Table: DIRECTOR_AWARD
DROP TABLE IF EXISTS DIRECTOR_AWARD;
CREATE TABLE DIRECTOR_AWARD (
    AWARD_ID INT PRIMARY KEY REFERENCES AWARD(AWARD_ID) ON DELETE CASCADE,
    DIRECTOR_ID INT,
    MOVIE VARCHAR(255)
);

-- Table: ACTOR_AWARD_IS_NOMINATED
DROP TABLE IF EXISTS ACTOR_AWARD_IS_NOMINATED;
CREATE TABLE ACTOR_AWARD_IS_NOMINATED (
    AWARD_ID INT REFERENCES ACTOR_AWARD(AWARD_ID) ON DELETE CASCADE,
    PARTICIPANT_ID INT,
    ROLE VARCHAR(255),
    MOVIE VARCHAR(255),
    PRIMARY KEY (AWARD_ID, PARTICIPANT_ID)
);

-- Table: DIRECTOR_AWARD_IS_NOMINATED
DROP TABLE IF EXISTS DIRECTOR_AWARD_IS_NOMINATED;
CREATE TABLE DIRECTOR_AWARD_IS_NOMINATED (
    AWARD_ID INT REFERENCES DIRECTOR_AWARD(AWARD_ID) ON DELETE CASCADE,
    PARTICIPANT_ID INT,
    MOVIE VARCHAR(255),
    PRIMARY KEY (AWARD_ID, PARTICIPANT_ID)
);

-- Table: PARTICIPANT
DROP TABLE IF EXISTS PARTICIPANT;
CREATE TABLE PARTICIPANT (
    PARTICIPANT_ID SERIAL PRIMARY KEY,
    FIRSTNAME VARCHAR(100),
    MIDDLENAME VARCHAR(100),
    LASTNAME VARCHAR(100),
    NATIONALITY VARCHAR(100),
    DOB DATE
);

-- Table: ACTOR
DROP TABLE IF EXISTS ACTOR;
CREATE TABLE ACTOR (
    PARTICIPANT_ID INT PRIMARY KEY REFERENCES PARTICIPANT(PARTICIPANT_ID) ON DELETE CASCADE
);

-- Table: DIRECTOR
DROP TABLE IF EXISTS DIRECTOR;
CREATE TABLE DIRECTOR (
    PARTICIPANT_ID INT PRIMARY KEY REFERENCES PARTICIPANT(PARTICIPANT_ID) ON DELETE CASCADE
);

-- Table: MOVIE_CASTS
DROP TABLE IF EXISTS MOVIE_CASTS;
CREATE TABLE MOVIE_CASTS (
    MOVIE_ID INT REFERENCES MOVIE(MOVIE_ID) ON DELETE CASCADE,
    PARTICIPANT_ID INT REFERENCES ACTOR(PARTICIPANT_ID) ON DELETE CASCADE,
    ROLE VARCHAR(100),
    PRIMARY KEY (MOVIE_ID, PARTICIPANT_ID)
);

-- Table: IS_DIRECTED
DROP TABLE IF EXISTS IS_DIRECTED;
CREATE TABLE IS_DIRECTED (
    MOVIE_ID INT REFERENCES MOVIE(MOVIE_ID) ON DELETE CASCADE,
    PARTICIPANT_ID INT REFERENCES DIRECTOR(PARTICIPANT_ID) ON DELETE CASCADE,
    PRIMARY KEY (MOVIE_ID, PARTICIPANT_ID)
);

-- Table: LIKES_MOVIE
DROP TABLE IF EXISTS LIKES_MOVIE;
CREATE TABLE LIKES_MOVIE (
    USER_ID INT REFERENCES "USER"(USER_ID) ON DELETE CASCADE,
    MOVIE_ID INT REFERENCES MOVIE(MOVIE_ID) ON DELETE CASCADE,
    PRIMARY KEY (USER_ID, MOVIE_ID)
);

-- Table: GENRE
DROP TABLE IF EXISTS GENRE;
CREATE TABLE GENRE (
    NAME VARCHAR(100) PRIMARY KEY
);

-- Table: BELONGS_TO
DROP TABLE IF EXISTS BELONGS_TO;
CREATE TABLE BELONGS_TO (
    MOVIE_ID INT REFERENCES MOVIE(MOVIE_ID) ON DELETE CASCADE,
    GENRE_NAME VARCHAR(100) REFERENCES GENRE(NAME) ON DELETE CASCADE,
    PRIMARY KEY (MOVIE_ID, GENRE_NAME)
);

-- Table: LIKES_GENRE
DROP TABLE IF EXISTS LIKES_GENRE;
CREATE TABLE LIKES_GENRE (
    USER_ID INT REFERENCES "USER"(USER_ID) ON DELETE CASCADE,
    GENRE_NAME VARCHAR(100) REFERENCES GENRE(NAME) ON DELETE CASCADE,
    PRIMARY KEY (USER_ID, GENRE_NAME)
);

-- Table: RATES
DROP TABLE IF EXISTS RATES; 
CREATE TABLE RATES (
    USER_ID INT REFERENCES "USER"(USER_ID) ON DELETE CASCADE,
    MOVIE_ID INT REFERENCES MOVIE(MOVIE_ID) ON DELETE CASCADE,
    RATE_POINT NUMERIC(3,1),
    PRIMARY KEY (USER_ID, MOVIE_ID)
);

-- Table: MOVIE_DISTRIBUTOR
DROP TABLE IF EXISTS MOVIE_DISTRIBUTOR;
CREATE TABLE MOVIE_DISTRIBUTOR (
    NAME VARCHAR(255) PRIMARY KEY,
    FOUNDED_YEAR INT,
    PHONE_NUMBER VARCHAR(20)
);

-- Table: DISTRIBUTOR_PAYMENT_METHOD
DROP TABLE IF EXISTS DISTRIBUTOR_PAYMENT_METHOD;
CREATE TABLE DISTRIBUTOR_PAYMENT_METHOD (
    DISTRIBUTOR_NAME VARCHAR(255) REFERENCES MOVIE_DISTRIBUTOR(NAME) ON DELETE CASCADE,
    PAYMENT_METHOD VARCHAR(100),
    PRIMARY KEY (DISTRIBUTOR_NAME, PAYMENT_METHOD)
);

-- Table: CINEMA
DROP TABLE IF EXISTS CINEMA;
CREATE TABLE CINEMA (
    NAME VARCHAR(255) PRIMARY KEY,
    DISTRIBUTOR_NAME VARCHAR(255) REFERENCES MOVIE_DISTRIBUTOR(NAME) ON DELETE CASCADE,
    LOCATION VARCHAR(255),
    NUMBER_OF_ROOMS INT
);

-- Table: CINEMA_STREAMS
DROP TABLE IF EXISTS CINEMA_STREAMS;
CREATE TABLE CINEMA_STREAMS (
    CINEMA_NAME VARCHAR(255) REFERENCES CINEMA(NAME) ON DELETE CASCADE,
    MOVIE_ID INT REFERENCES MOVIE(MOVIE_ID) ON DELETE CASCADE,
    PRIMARY KEY (CINEMA_NAME, MOVIE_ID)
);

-- Table: SHOWTIME
DROP TABLE IF EXISTS SHOWTIME;
CREATE TABLE SHOWTIME (
    CINEMA_NAME VARCHAR(255) REFERENCES CINEMA(NAME) ON DELETE CASCADE,
    TIME TIMESTAMP,
    ROOM integer,
    NUMBER_OF_TICKETS integer,
    MOVIE_ID INT REFERENCES cinematic_movie(MOVIE_ID) ON DELETE CASCADE,
    PRIMARY KEY (CINEMA_NAME, TIME, ROOM, MOVIE_ID)
);

-- Add missing foreign key
ALTER TABLE MOVIE
ADD CONSTRAINT fk_studio
FOREIGN KEY (STUDIO_ID) REFERENCES STUDIO(STUDIO_ID) ON DELETE CASCADE;

ALTER TABLE EPISODE_CASTS
ADD CONSTRAINT fk_episode_cast
FOREIGN KEY (PARTICIPANT_ID) REFERENCES ACTOR(PARTICIPANT_ID) ON DELETE CASCADE;

ALTER TABLE REVIEW
ADD CONSTRAINT fk_review
FOREIGN KEY (USER_ID) REFERENCES "USER"(USER_ID) ON DELETE CASCADE;

ALTER TABLE MOVIE_AWARD_IS_NOMINATED
ADD CONSTRAINT fk_MOVIE_AWARD_IS_NOMINATED
FOREIGN KEY (AWARD_ID) REFERENCES MOVIE_AWARD(AWARD_ID) ON DELETE CASCADE;

ALTER TABLE ACTOR_AWARD
ADD CONSTRAINT fk_ACTOR_AWARD
FOREIGN KEY (ACTOR_ID) REFERENCES ACTOR(PARTICIPANT_ID) ON DELETE CASCADE;

ALTER TABLE DIRECTOR_AWARD
ADD CONSTRAINT fk_DIRECTOR_AWARD
FOREIGN KEY (DIRECTOR_ID) REFERENCES DIRECTOR(PARTICIPANT_ID) ON DELETE CASCADE;

ALTER TABLE ACTOR_AWARD_IS_NOMINATED
ADD CONSTRAINT fk_ACTOR_AWARD_IS_NOMINATED
FOREIGN KEY (PARTICIPANT_ID) REFERENCES ACTOR(PARTICIPANT_ID) ON DELETE CASCADE;

ALTER TABLE DIRECTOR_AWARD_IS_NOMINATED
ADD CONSTRAINT fk_DIRECTOR_AWARD_IS_NOMINATED
FOREIGN KEY (PARTICIPANT_ID) REFERENCES DIRECTOR(PARTICIPANT_ID) ON DELETE CASCADE;